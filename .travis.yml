language: cpp
dist: focal

matrix:
  include:
    - name: "linux gcc-7"
      os: linux
      addons:
        apt: { packages: [g++-7],
               sources:  [ubuntu-toolchain-r-test] }
      env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && BUILD_TYPE=Release"

    - name: "linux gcc-8"
      os: linux
      addons:
        apt: { packages: [g++-8],
               sources:  [ubuntu-toolchain-r-test] }
      env: MATRIX_EVAL="CC=gcc-8 && CXX=g++-8 && BUILD_TYPE=Release"

    - name: "linux gcc-9"
      os: linux
      addons:
        apt: { packages: [g++-9],
               sources:  [ubuntu-toolchain-r-test] }
      env: MATRIX_EVAL="CC=gcc-9 && CXX=g++-9 && BUILD_TYPE=Release"

    - name: "linux gcc-10"
      os: linux
      addons:
        apt: { packages: [g++-10],
               sources:  [ubuntu-toolchain-r-test] }
      env: MATRIX_EVAL="CC=gcc-10 && CXX=g++-10 && BUILD_TYPE=Release"

    - name: "linux gcc-7 (coverage)"
      os: linux
      addons:
        apt: { packages: [g++-7, lcov],
               sources:  [ubuntu-toolchain-r-test] }
      env: MATRIX_EVAL="CC=gcc-7 && CXX=g++-7 && BUILD_TYPE=Coverage && GCOV=gcov-7"

before_install:
  - eval "${MATRIX_EVAL}"
  - python3 -m pip install --upgrade pip
  - python3 -m pip install "pandas>=0.22.0"
  - python3 -m pip install binpacking==1.4.3
  - binpacking -h # ret 0
  - git clone https://github.com/pirovc/pylca.git
  - cd pylca
  - git checkout d1474b2ec2c028963bafce278ccb69cc21c061fa #v1.0.0
  - python3 setup.py install --user
  - cd ..
  - git clone https://github.com/pirovc/taxsbp.git
  - cd taxsbp
  - git checkout 35ffb1e1a92f6199d757dfdd2f1971db29dd4070 # v1.1.1
  - python3 setup.py install --user
  - taxsbp -h # ret 0
  - cd ..
  - if [ "$BUILD_TYPE" == "Coverage" ]; then 
      python3 -m pip install coverage;
    fi

script:
  - mkdir build && cd build 
  - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DVERBOSE_CONFIG=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCONDA=OFF ..
  - cat compile_commands.json
  - cmake --build . -- -j2
  - ctest -VV .
  - sudo make install
  - ganon-build -h # ret 0
  - ganon-classify -h # ret 0
  - cd ..
  - python3 -m unittest discover -s tests/ganon/unit/ -v
  - python3 -m unittest discover -s tests/ganon/integration/ -v
  - python3 setup.py install --user
  - ganon -h # ret 0

after_success:
  - if [ "$BUILD_TYPE" == "Coverage" ]; then 
      lcov --gcov-tool $(which ${GCOV}) -d . -c -o coverage.info;
      coverage run --append -m unittest discover -s tests/ganon/unit/ -v;
      coverage run --append -m unittest discover -s tests/ganon/integration/ -v;
      bash <(curl -s https://codecov.io/bash) -X gcov || echo "Codecov did not collect coverage reports";
    fi

notifications:
  email: false
